#!/usr/bin/env node

// 交互式命令行
const inquirer = require('inquirer')
// 修改控制台字符串的样式
const chalk = require('chalk')
// node 内置文件模块
const fs = require('fs')
// 读取根目录下的 template.json
const tplListP = require(`${__dirname}/../templatePC`)
const tplListM = require(`${__dirname}/../templateMobile`)
const ora = require('ora')
//下载git仓库
const download = require('download-git-repo')
const exec = require('child_process').exec;


const choicesP = tplListP.map(template => {
  return {
    name: `${template.name} - ${template.description}`,
    value: template.url
  }
})
const choicesM = tplListM.map(template => {
  return {
    name: `${template.name} - ${template.description}`,
    value: template.url
  }
})
// 自定义交互式命令行的问题及简单的校验
let question1 = [{
    name: "platform",
    type: 'list',
    message: "请选择使用场景",
    choices:[{name:"开发PC端项目",value:"pc"},{name:"开发移动端项目",value:"mobile"}]
  }
]
let question2 = [{
  name: "url",
  type: 'list',
  message: "请选择使用模板",
  choices:[],
},
{
  name: "projectName",
  type: 'input',
  message: "请输入项目名称",
  validate(val) {
    if (val === '') return '名称不能为空!'
    return true
  }
}
]
//第一组问题
inquirer.prompt(question1).then(answers1 => {
    // answers是所有问题的答案
    let {platform} = answers1;
    if(platform=='pc'){
      question2[0].choices=choicesP
    }else if(platform=='mobile'){
      question2[0].choices=choicesM
    }else{
      console.log(`exit`)
      return;
    }
    //第二组问题
    inquirer.prompt(question2).then(answers2 => {
      let {
        url,
        projectName
      } = answers2;
      // 过滤 unicode 字符
      url = url.replace(/[\u0000-\u0019]/g, '')
      let opt = {
        url: url,
        name: projectName
      }
      //下载资源
      handleAction(opt)
    })
    

  })


//下载github或gitlab项目
function downloadGitHub(opt, callBack) {
  download(
    opt.url,
    opt.name,
    err => {
      if (err) {
        callBack(err)
      } else {
        callBack(true)
      }

    }
  )
}
//下载对应选项的资源
function handleAction(opt) {
  // 出现加载图标
  const spinner = ora("下载中，请稍候...");
  spinner.start();
  // 执行下载方法并传入参数
  // if (isGithub(opt.url) || isGitlab(opt.url)) {
    downloadGitHub(opt, res => {
      // 结束加载图标
      if (res !== true) {
        spinner.fail();
        console.log(chalk.red(`生成失败! ${res}`))
        return
      }
      spinner.succeed();
      console.log(chalk.green('\n 生成成功!'))
      console.log('\n 快速开始:')
      console.log(` cd ${opt.name}`)
      console.log(` npm install --registry=https://registry.npm.taobao.org`)
      console.log(` npm run dev \n`)
    })
  // } else {
  //   downloadExtra(opt, res => {
  //     // 结束加载图标
  //     if (res !== true) {
  //       spinner.fail();
  //       console.log(chalk.red(`生成失败! ${res}`))
  //       return
  //     }
  //     spinner.succeed();
  //     console.log(chalk.green('\n 生成成功!'))
  //     console.log('\n 快速开始:')
  //     console.log(` cd ${opt.name}`)
  //     console.log(` npm i`)
  //     console.log(` npm run dev`)
  //   })
  // }
}
//下载非github
function downloadExtra(opt, callBack) {
  exec('git clone ' + opt.url + ' ' + opt.name, function (err, stdout, stderr) {
    if (err) {
      callBack(err)
    } else {
      callBack(true)
    }

  });
}

function isGithub(url) {
  return /github:/.test(url)
}

function isGitlab(url) {
  return /gitlab:/.test(url)
}