#!/usr/bin/env node
 
const program = require('commander')
const chalk = require('chalk')
const ora = require('ora')
const download = require('download-git-repo')
const exec = require('child_process').exec;
const tplListP = require(`${__dirname}/../templatePC`)
const tplListM = require(`${__dirname}/../templateMobile`)



program
 .usage('<template-name> [project-name]')
program.parse(process.argv)
// 当没有输入参数的时候给个提示
if (program.args.length < 1) return program.help()
 
// 好比 vue init webpack project-name 的命令一样，第一个参数是 webpack，第二个参数是 project-name
let templateName = program.args[0]
let projectName = program.args[1]
// 小小校验一下参数
let res=false
  tplListP.map(template=>{
    if(template['name'] === templateName){
        res= true
        url=template['url']
    }
  })
  tplListM.map(template=>{
    if(template['name'] === templateName){
        res= true
        url=template['url']
    }
  })
if (!res) {
 console.log(chalk.red('\n 模板不存在! \n '))
 return
}
if (!projectName) {
 console.log(chalk.red('\n 项目名称不能为空! \n '))
 return
}
 url=url.replace(/[\u0000-\u0019]/g, '')
 let opt={
  url:url,
  name:projectName
 }
// url = tplListP[templateName]
 // 出现加载图标
const spinner = ora("下载中，请稍候...");
spinner.start();
// 执行下载方法并传入参数
if(isGithub(url) || isGitlab(url)){
  downloadGitHub(opt,res=>{
    // 结束加载图标
    if(res!==true){
      spinner.fail();
      console.log(chalk.red(`生成失败! ${res}`))
      return
    }
    spinner.succeed();
    console.log(chalk.green('\n 生成成功!'))
    console.log('\n 快速开始:')
    console.log(` cd ${projectName}`)
    console.log(` npm install --registry=https://registry.npm.taobao.org`)
    console.log(` npm run dev \n`)
  })
}else{
  downloadExtra(opt,res=>{
    // 结束加载图标
    if(res!==true){
      spinner.fail();
      console.log(chalk.red(`生成失败! ${res}`))
      return
    }
    spinner.succeed();
    console.log(chalk.green('\n 生成成功!'))
    console.log('\n 快速开始：')
    console.log(` cd ${projectName}`)
    console.log(` npm i`)
    console.log(` npm run dev`)
  })
}
 //下载github或gitlab项目
 function downloadGitHub(opt,callBack){
    download (
      opt.url,
      opt.name,
      err => {
      if (err) {
        callBack(err)
      }else{
        callBack(true)
      }
      
      }
     )
   }
   
   //下载非github
   function downloadExtra(opt,callBack){
    exec('git clone '+opt.url+' '+opt.name, function (err, stdout, stderr) {
      if (err) {
        callBack(err)
      }else{
        callBack(true)
      }
      
    });
   }
   function isGithub(url){
    return /github:/.test(url)
   }
   function isGitlab(url){
    return /gitlab:/.test(url)
   }